import React, { createElement } from 'react';
import PropTypes from 'prop-types';
import { ErrorBoundary } from '../enhance/error_boundary';
import { RenderError } from '../../../common/lib/errors';
import { ArgLabel } from './arg_label';
import { ArgSimpleForm } from './arg_simple_form';
import { SimpleFailure } from './simple_failure';
import { AdvancedFailure } from './advanced_failure';
import './arg_form.less';

const getTemplates = (err, { argTypeInstance, label, setLabel, resetErrorState, templateProps }) => {
  const { template, simpleTemplate } = argTypeInstance.argType;
  const argumentProps = {
    ...templateProps,
    defaultValue: argTypeInstance.default,
    // Provide templates with a renderError method, and wrap the error in a known error type
    // to stop Kibana's window.error from being called
    // see window_error_handler.js for details
    renderError: (msg) => { throw new RenderError(msg || 'Render failed'); },
    setLabel,
    resetErrorState,
    label,
  };

  // if provided any kind of error, render the fallback failure forms
  if (err) {
    return {
      simpleForm: createElement(SimpleFailure, argumentProps),
      advancedForm: createElement(AdvancedFailure, argumentProps),
    };
  }

  return {
    simpleForm: simpleTemplate && createElement(simpleTemplate, argumentProps),
    advancedForm: template && createElement(template, argumentProps),
  };
};

// This is what is being generated by render() from the Arg class. It is called in FunctionForm
export const ArgForm = (props) => {
  const {
    argTypeInstance,
    templateProps,
    valueMissing,
    label,
    setLabel,
    expand,
    setExpand,
    onValueRemove,
  } = props;

  return (
    <ErrorBoundary>
      {({ error, resetErrorState }) => {
        const { simpleForm, advancedForm } = getTemplates(error, {
          argTypeInstance,
          label,
          setLabel,
          resetErrorState,
          templateProps,
        });
        const expandableLabel = Boolean(simpleForm && advancedForm);

        return (
          <div className="canvas__arg">
            <div className="canvas__arg--header">
              <ArgLabel
                label={label}
                help={argTypeInstance.help}
                expandable={expandableLabel || error}
                expanded={expand}
                setExpand={setExpand}
              />

              <ArgSimpleForm
                required={argTypeInstance.required}
                valueMissing={valueMissing}
                onRemove={onValueRemove}
              >
                { simpleForm }
              </ArgSimpleForm>
            </div>

            <div
              className="canvas__arg--controls"
              style={{ display: (advancedForm && (expand || !simpleForm)) ? 'block' : 'none' }}
            >
              { advancedForm }
            </div>
          </div>
        );
      }}
    </ErrorBoundary>
  );
};

ArgForm.propTypes = {
  argTypeInstance: PropTypes.object,
  templateProps: PropTypes.object,
  valueMissing: PropTypes.bool,
  label: PropTypes.string,
  setLabel: PropTypes.func.isRequired,
  expand: PropTypes.bool,
  setExpand: PropTypes.func,
  onValueRemove: PropTypes.func,
};
