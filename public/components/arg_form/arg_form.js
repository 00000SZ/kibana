import React, { createElement } from 'react';
import PropTypes from 'prop-types';
import './arg_form.less';

// This is what is being generated by render() from the Arg class. It is called in FunctionForm
export const ArgForm = ({ argTypeInstance, templateProps, label, setLabel, expand, setExpand, onValueRemove }) => {
  // Do createElement stuff here.
  const { template, simpleTemplate } = argTypeInstance.argType;

  const templateElement = !template ? null : createElement(template, { ...templateProps, setLabel, label });
  const simpleTemplateElement = !simpleTemplate ? null : createElement(simpleTemplate, { ...templateProps, setLabel, label });

  return (
    <div className="canvas__arg">
      <div className="canvas__arg--header">
        {(templateElement || simpleTemplateElement) && !(templateElement && simpleTemplateElement) ? (
          <label className="canvas__arg--label">
            {label}
          </label>
        ) : (
          <label className="canvas__arg--label clickable" onClick={() => setExpand(!expand)}>
            <i className={`fa fa-chevron-${expand ? 'down' : 'right'}`}/>
            {label}
          </label>
        )}
        <div className="canvas__arg--simple-wrapper">
          <div className="canvas__arg--simple-top"/>
          <div className="canvas__arg--simple">
            {simpleTemplateElement}
          </div>
          <div className="canvas__arg--simple-bottom"/>
        </div>
        <div className="canvas__arg--remove ">
          <i className="fa fa-trash-o clickable" onClick={onValueRemove} />
        </div>
      </div>

      <div className="canvas__arg--controls" style={{ display: (expand || !simpleTemplate) ? 'block' : 'none' }}>
        { templateElement }
      </div>
    </div>
  );
};

ArgForm.propTypes = {
  argTypeInstance: PropTypes.object,
  templateProps: PropTypes.object,
  label: PropTypes.string,
  setLabel: PropTypes.func,
  expand: PropTypes.bool,
  setExpand: PropTypes.func,
  onValueRemove: PropTypes.func,
};
