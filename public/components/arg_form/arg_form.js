import React from 'react';
import PropTypes from 'prop-types';
import { ErrorBoundary } from '../enhance/error_boundary';
import { ArgLabel } from './arg_label';
import { ArgSimpleForm } from './arg_simple_form';
import { ArgTemplateForm } from './arg_template_form';
import { SimpleFailure } from './simple_failure';
import { AdvancedFailure } from './advanced_failure';
import './arg_form.less';

// This is what is being generated by render() from the Arg class. It is called in FunctionForm
export const ArgForm = props => {
  const {
    argTypeInstance,
    templateProps,
    valueMissing,
    label,
    setLabel,
    expand,
    setExpand,
    onValueRemove,
    workpad,
    renderError,
    setRenderError,
  } = props;

  return (
    <ErrorBoundary>
      {({ error, resetErrorState }) => {
        const { template, simpleTemplate } = argTypeInstance.argType;

        const hasError = Boolean(error) || renderError;

        const argumentProps = {
          ...templateProps,
          defaultValue: argTypeInstance.default,

          renderError: () => {
            // TODO: don't do this
            // It's an ugly hack to avoid React's render cycle and ensure the error happens on the next tick
            // This is important; Otherwise we end up updating state in the middle of a render cycle
            Promise.resolve().then(() => {
              // Provide templates with a renderError method, and wrap the error in a known error type
              // to stop Kibana's window.error from being called
              // see window_error_handler.js for details,
              setRenderError(true);
            });
          },
          error: hasError,
          setLabel,
          resetErrorState: () => {
            resetErrorState();
            setRenderError(false);
          },
          label,
          workpad,
        };

        const expandableLabel = hasError || Boolean(simpleTemplate && template);

        const showAdvanced = hasError ? expand : template && (expand || !simpleTemplate);
        return (
          <div className="canvas__arg">
            <div className="canvas__arg--header">
              <ArgLabel
                label={label}
                help={argTypeInstance.help}
                expandable={expandableLabel}
                expanded={expand}
                setExpand={setExpand}
              />

              <ArgSimpleForm
                required={argTypeInstance.required}
                valueMissing={valueMissing}
                onRemove={onValueRemove}
              >
                <ArgTemplateForm
                  template={simpleTemplate}
                  errorTemplate={SimpleFailure}
                  error={hasError}
                  argumentProps={argumentProps}
                />
              </ArgSimpleForm>
            </div>

            <div
              className="canvas__arg--controls"
              style={{
                display: showAdvanced ? 'block' : 'none',
              }}
            >
              <ArgTemplateForm
                template={template}
                errorTemplate={AdvancedFailure}
                error={hasError}
                argumentProps={argumentProps}
              />
            </div>
          </div>
        );
      }}
    </ErrorBoundary>
  );
};

ArgForm.propTypes = {
  workpad: PropTypes.object.isRequired,
  argTypeInstance: PropTypes.object,
  templateProps: PropTypes.object,
  valueMissing: PropTypes.bool,
  label: PropTypes.string,
  setLabel: PropTypes.func.isRequired,
  expand: PropTypes.bool,
  setExpand: PropTypes.func,
  onValueRemove: PropTypes.func,
  renderError: PropTypes.bool.isRequired,
  setRenderError: PropTypes.func.isRequired,
};
