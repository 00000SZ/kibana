buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.3'
  }
}

plugins {
  id "com.moowork.node" version "1.2.0"
}

node {
  version = rootProject.nodeVersion
  yarnVersion = rootProject.yarnVersion
  download = true
}

task checkoutKibana(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
  inputs.property("kibanaVersion", kibanaVersion)
  outputs.files(fileTree("$rootDir/kibana/src"))

  dir = file("$rootDir/kibana")
  uri = 'https://github.com/elastic/kibana'
  treeish = kibanaVersion
  forceFetch = true
}

task bootstrap(type: YarnTask, dependsOn: [yarnSetup, checkoutKibana])  {
  inputs.property("kibanaVersion", kibanaVersion)
  inputs.files(
    file("$rootDir/kibana-extra/castro/package.json"),
    file("$rootDir/kibana-extra/castro/yarn.lock"),
    file("$rootDir/kibana/yarn.lock"),
    file("$rootDir/kibana/x-pack/yarn.lock"),
    fileTree("$rootDir/kibana/packages") {
      include "*/yarn.lock"
    }
  )

  outputs.files(
    file("$rootDir/kibana-extra/castro/node_modules/.yarn-integrity"),
    file("$rootDir/kibana/node_modules/.yarn-integrity"),
    file("$rootDir/kibana/x-pack/node_modules/.yarn-integrity"),
    fileTree("$rootDir/kibana/packages") {
      include "*/node_modules/.yarn-integrity"
    }
  )

  args = ['kbn', 'bootstrap']
  environment = ['FORCE_COLOR': 'true']
}

task startKibana(type: YarnTask, dependsOn: [bootstrap]) {
  args = ['start', '--logging.json=false']
  environment = ['FORCE_COLOR': 'true']
}

task startDeps(type: YarnTask, dependsOn: [bootstrap]) {
  args = ['start-deps']
  environment = ['FORCE_COLOR': 'true']
}

task lint(type: YarnTask, dependsOn: [bootstrap]) {
  args = ['tslint']
  environment = ['FORCE_COLOR': 'true']
}

task lintFix(type: YarnTask, dependsOn: [bootstrap]) {
  args = ['tslint', '--fix']
  environment = ['FORCE_COLOR': 'true']
}

task typeCheck(type: YarnTask, dependsOn: [bootstrap]) {
  args = ['type-check']
  environment = ['FORCE_COLOR': 'true']
}

task typeCheckWatch(type: YarnTask, dependsOn: [bootstrap]) {
  args = ['type-check', '--watch']
  environment = ['FORCE_COLOR': 'true']
}