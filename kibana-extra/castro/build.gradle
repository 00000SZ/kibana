plugins {
  id "com.moowork.node" version "1.2.0"
  id "de.undercouch.download" version "3.4.3"
}

node {
  version = rootProject.nodeVersion
  yarnVersion = rootProject.yarnVersion
  download = true
}

task generateProtoJs(type: NodeTask, dependsOn: [yarn]) {
  doFirst {
    mkdir 'common'
  }

  script = file('node_modules/.bin/pbjs')
  args = ['-t', 'static-module', '-w', 'commonjs', '--no-delimited', '--no-encode', '--no-decode', '--es6', '-o', 'common/proto.js', 'proto/*.proto']
}

task generateProto(type: NodeTask, dependsOn: [yarn, generateProtoJs]) {
  script = file('node_modules/.bin/pbts')
  args = ['-o', 'common/proto.d.ts', 'common/proto.js']
}

task bootstrap(type: YarnTask, dependsOn: [yarn]) {
  args = ['kbn', 'bootstrap']
}

task startKibana(type: YarnTask, dependsOn: [yarn, generateProto]) {
  args = ['start', '--elasticsearch.url', 'http://localhost:9201']
}

task downloadKibana(type: Download) {
  src "https://github.com/elastic/kibana/archive/${kibanaVersion}.zip" // change the commit id to advance revision
  dest buildDir
  overwrite false
}

task clean(type: Delete) {
  delete "build", "node_modules", "common"
}

// TODO: wait https://github.com/gradle/gradle/issues/1108 to simplify the code
task setupKibana(type: Sync, dependsOn: downloadKibana) {
  from zipTree("$buildDir/${kibanaVersion}.zip")
  into "../../kibana"

  eachFile { FileCopyDetails fcp ->
    if (fcp.relativePath.pathString.startsWith("kibana-${kibanaVersion}/")) {
      def segments = fcp.relativePath.segments
      def pathsegments = segments[1..-1] as String[]
      fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
    } else {
      fcp.exclude()
    }
  }
  includeEmptyDirs = false
}

// tasks.bootstrap.dependsOn(setupKibana)